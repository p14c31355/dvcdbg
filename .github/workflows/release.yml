name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Install dependencies
        run: |
          cargo install git-cliff
          cargo install cargo-edit

      - name: Update Cargo.toml version
        run: |
          version="${GITHUB_REF_NAME#v}"
          cargo set-version "$version"

      - uses: rust-lang/crates-io-auth-action@v1
        id: auth

      - name: Generate CHANGELOG
        run: git cliff --config .github/cliff.toml --tag ${GITHUB_REF_NAME} > CHANGELOG.md

      - name: Commit CHANGELOG and Cargo.toml version bump
        run: |
          git add CHANGELOG.md Cargo.toml
          git commit -m "chore(release): update changelog and version to ${{ steps.update_version.outputs.version }}"
          git push

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ steps.auth.outputs.token }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md

  build_and_measure_firmware:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install GNUplot
        run: sudo apt-get update && sudo apt-get install -y gnuplot

      - name: Build firmware
        run: cargo build --release

      - name: Measure firmware size
        run: |
          size target/release/dvcdbg | tee size.txt
          bin_size=$(grep -m1 'text' size.txt | awk '{print $1}')
          echo "$(date +%Y-%m-%d),${bin_size}" >> .github/size-history.csv

      - name: Generate size history graph
        run: |
          gnuplot <<EOF
            set terminal svg size 800,400
            set output '.github/size-history.svg'
            set title "Firmware Size History"
            set xlabel "Date"
            set ylabel "Size (bytes)"
            set xdata time
            set timefmt "%Y-%m-%d"
            set format x "%Y-%m-%d"
            set grid
            plot '.github/size-history.csv' using 1:2 with linespoints title 'Firmware Size'
          EOF

      - name: Commit size history artifacts
        run: |
          git add .github/size-history.csv .github/size-history.svg
          git commit -m "Update firmware size history [skip ci]" || echo "No changes"
          git push